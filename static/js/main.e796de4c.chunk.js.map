{"version":3,"sources":["components/Types/Types.js","components/ColorSelect/ColorSelect.jsx","components/VolumesList/VolumesList.jsx","components/FormButtons/FormButtons.jsx","components/GoodForm/GoodForm.jsx","components/Good/Good.jsx","App.js","index.js"],"names":["VolumeType","id","PropTypes","number","isRequired","count","ColorType","colorName","string","arrayOf","shape","ColorSelect","colors","setIsColorsOpen","isColorsOpen","selectedColor","setSelectedColor","className","onMouseLeave","onMouseEnter","current","src","alt","map","color","type","onClick","VolumesList","volumes","selectedVolume","setSelectedVolume","volume","value","name","checked","readOnly","htmlFor","FormButtons","setCount","GoodForm","good","useState","onSubmit","event","preventDefault","Good","isGoodChoosen","setIsGoodChoosen","imageUrl","selectedImg","setSelectedImg","imageHoverUrl","role","tabIndex","onKeyPress","buttonUrl","buttonUrl2","title","description","App","goodsFromServer","goods","setGoods","ReactDOM","render","document","getElementById"],"mappings":"oMAEaA,EAAa,CACxBC,GAAIC,IAAUC,OAAOC,WACrBC,MAAOH,IAAUC,OAAOC,YAGbE,EAAY,CACvBL,GAAIC,IAAUC,OAAOC,WACrBG,UAAWL,IAAUM,OAAOJ,Y,GAIxBF,IAAUC,OAAOC,WACXF,IAAUM,OAAOJ,WACZF,IAAUM,OAAOJ,WACzBF,IAAUM,OAAOJ,WACXF,IAAUM,OAAOJ,WACrBF,IAAUO,QACjBP,IAAUQ,MAAMV,GAAYI,YAC5BA,WACMF,IAAUO,QAChBP,IAAUQ,MAAMJ,GAAWF,YAC3BA,WAESF,IAAUM,OAAOJ,WAChBF,IAAUM,OAAOJ,W,MCtBlBO,EAAc,SAAC,GAAD,IACzBC,EADyB,EACzBA,OACAC,EAFyB,EAEzBA,gBACAC,EAHyB,EAGzBA,aACAC,EAJyB,EAIzBA,cACAC,EALyB,EAKzBA,iBALyB,OAOzB,sBACEC,UAAU,qBACVC,aAAc,WACZL,GAAgB,IAHpB,UAME,sBACEI,UAAU,sBACVE,aAAc,WACZN,GAAgB,SAAAO,GAAO,OAAKA,MAHhC,UAMGL,GAAiB,2BAClB,qBAAKE,UAAU,wBAAf,SACE,qBACEI,IAAI,iCACJC,IAAI,SACJL,UAAYH,EAER,iBADA,2BAOTA,EAEG,oBAAIG,UAAU,oBAAd,SACGL,EAAOW,KAAI,SAAAC,GAAK,OACf,oBAEEP,UAAU,cAFZ,SAIE,wBACEA,UAAU,qBACVQ,KAAK,SACLC,QAAS,WACPV,EAAiBQ,EAAMjB,WACvBM,GAAgB,IALpB,SAQGW,EAAMjB,aAXJiB,EAAMvB,SAgBf,OCrDG0B,EAAc,SAAC,GAAD,IACzBC,EADyB,EACzBA,QACAC,EAFyB,EAEzBA,eACAC,EAHyB,EAGzBA,kBAHyB,OAKzB,mCACGF,EAAQL,KAAI,SAAAQ,GAAM,OACjB,eAAC,WAAD,WAGE,uBACEN,KAAK,QACLxB,GAAI8B,EAAO9B,GACX+B,MAAM,IACNC,KAAK,QACLhB,UAAU,cACVS,QAAS,kBAAMI,EAAkBC,EAAO1B,QACxC6B,QAASH,EAAO1B,QAAUwB,EAC1BM,UAAQ,IAEV,uBAAOC,QAASL,EAAO9B,GAAvB,mBACM8B,EAAO1B,MADb,qBAZK0B,EAAO9B,UCTPoC,EAAc,SAAC,GAAD,IAAGhC,EAAH,EAAGA,MAAOiC,EAAV,EAAUA,SAAV,OACzB,sBAAKrB,UAAU,0BAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,wBACEA,UAAU,qBACVQ,KAAK,SACLC,QAAS,kBAAMY,GAAS,SAAAlB,GAAO,OAC5BA,GAAW,EACR,EACAA,EAAU,MANlB,eAWA,mBAAGH,UAAU,cAAb,SACIZ,EAAQ,EACNA,EACA,IAGN,wBACEY,UAAU,qBACVQ,KAAK,SACLC,QAAS,kBAAMY,GAAS,SAAAlB,GAAO,OAAIA,EAAU,MAH/C,kBAQF,wBACEH,UAAU,mBACVQ,KAAK,SAFP,sDCxBSc,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,EAAwCC,oBAAS,GAAjD,mBAAO3B,EAAP,KAAqBD,EAArB,KACA,EAA4C4B,mBAAS,KAArD,mBAAOZ,EAAP,KAAuBC,EAAvB,KACA,EAA0CW,mBAAS,IAAnD,mBAAO1B,EAAP,KAAsBC,EAAtB,KACA,EAA0ByB,mBAAS,GAAnC,mBAAOpC,EAAP,KAAciC,EAAd,KACQ1B,EAAoB4B,EAApB5B,OAAQgB,EAAYY,EAAZZ,QAEhB,OACE,uBACEX,UAAU,aACVyB,SAAU,SAACC,GACTA,EAAMC,iBAEN5B,EAAiB,IACjBc,EAAkB,KAClBQ,EAAS,IAPb,UAUE,sBAAKrB,UAAU,gBAAf,UACE,cAAC,EAAD,CACEL,OAAQA,EACRE,aAAcA,EACdD,gBAAiBA,EACjBE,cAAeA,EACfC,iBAAkBA,IAEpB,mBAAGC,UAAU,cAAb,oBACO,IAAMY,GAAkBxB,EAD/B,4BAIDS,EACG,GAEA,cAAC,EAAD,CACEc,QAASA,EACTC,eAAgBA,EAChBC,kBAAmBA,IAIzB,cAAC,EAAD,CACEzB,MAAOA,EACPiC,SAAUA,QC5CLO,EAAO,SAAC,GAAc,IAAZL,EAAW,EAAXA,KACrB,EAA0CC,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAsCN,mBAASD,EAAKQ,UAApD,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,OACE,mCACE,sBAAmBjC,UAAU,wBAA7B,UACE,qBAAKA,UAAU,YAAf,iBAEA,qBACEA,UAAU,sBADZ,SAGE,qBACEI,IAAK4B,EACL3B,IAAI,UACJL,UAAU,cACVE,aAAc,kBAAM+B,EAAeV,EAAKW,gBACxCjC,aAAc,kBAAMgC,EAAeV,EAAKQ,eAI5C,qBACE/B,UAAU,YACVmC,KAAK,SACLC,SAAU,EACVC,WAAY,WACVP,GAAiB,SAAA3B,GAAO,OAAKA,MAE/BM,QAAS,WACPqB,GAAiB,SAAA3B,GAAO,OAAKA,MARjC,SAWG0B,EACG,qBAAKzB,IAAKmB,EAAKe,UAAWjC,IAAI,WAC9B,qBAAKD,IAAKmB,EAAKgB,WAAYlC,IAAI,eAIrC,oBAAIL,UAAU,cAAd,SAA6BuB,EAAKiB,QAElC,mBAAGxC,UAAU,aAAb,SAA2BuB,EAAKkB,cAEhC,cAAC,EAAD,CACElB,KAAMA,MArCAA,EAAKvC,OCNR0D,EAAM,WACjB,MAA0BlB,mBAASmB,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OACE,qBAAK7C,UAAU,eAAf,SACE,qBAAKA,UAAU,aAAf,SACG4C,EAAMtC,KAAI,SAAAiB,GAAI,OACb,cAAC,EAAD,CAEEsB,SAAUA,EACVtB,KAAMA,GAFDA,EAAKvC,YCTtB8D,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.e796de4c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const VolumeType = {\n  id: PropTypes.number.isRequired,\n  count: PropTypes.number.isRequired,\n};\n\nexport const ColorType = {\n  id: PropTypes.number.isRequired,\n  colorName: PropTypes.string.isRequired,\n};\n\nexport const GoodType = {\n  id: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string.isRequired,\n  imageHoverUrl: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  volumes: PropTypes.arrayOf(\n    PropTypes.shape(VolumeType).isRequired,\n  ).isRequired,\n  colors: PropTypes.arrayOf(\n    PropTypes.shape(ColorType).isRequired,\n  ).isRequired,\n  price: 200,\n  buttonUrl: PropTypes.string.isRequired,\n  buttonUrl2: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ColorType } from '../Types/Types';\n\nexport const ColorSelect = ({\n  colors,\n  setIsColorsOpen,\n  isColorsOpen,\n  selectedColor,\n  setSelectedColor,\n}) => (\n  <div\n    className=\"good__color-select\"\n    onMouseLeave={() => {\n      setIsColorsOpen(false);\n    }}\n  >\n    <div\n      className=\"good__select-button\"\n      onMouseEnter={() => {\n        setIsColorsOpen(current => !current);\n      }}\n    >\n      {selectedColor || 'Цвет'}\n      <div className=\"good__image-container\">\n        <img\n          src=\"/test_task/images/selected.svg\"\n          alt=\"select\"\n          className={!isColorsOpen\n            ? 'good__no-selected'\n            : 'good__selected'\n          }\n        />\n      </div>\n    </div>\n\n    {isColorsOpen\n      ? (\n        <ul className=\"good__colors-list\">\n          {colors.map(color => (\n            <li\n              key={color.id}\n              className=\"good__color\"\n            >\n              <button\n                className=\"good__color-button\"\n                type=\"button\"\n                onClick={() => {\n                  setSelectedColor(color.colorName);\n                  setIsColorsOpen(false);\n                }}\n              >\n                {color.colorName}\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : ''\n    }\n  </div>\n);\n\nColorSelect.propTypes = {\n  colors: PropTypes.arrayOf(\n    PropTypes.shape(ColorType).isRequired,\n  ).isRequired,\n  setIsColorsOpen: PropTypes.func.isRequired,\n  isColorsOpen: PropTypes.bool.isRequired,\n  selectedColor: PropTypes.string.isRequired,\n  setSelectedColor: PropTypes.func.isRequired,\n};\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { VolumeType } from '../Types/Types';\n\nexport const VolumesList = ({\n  volumes,\n  selectedVolume,\n  setSelectedVolume,\n}) => (\n  <>\n    {volumes.map(volume => (\n      <Fragment\n        key={volume.id}\n      >\n        <input\n          type=\"radio\"\n          id={volume.id}\n          value=\"1\"\n          name=\"radio\"\n          className=\"good__radio\"\n          onClick={() => setSelectedVolume(volume.count)}\n          checked={volume.count === selectedVolume}\n          readOnly\n        />\n        <label htmlFor={volume.id}>\n          {`${volume.count} мл`}\n        </label>\n      </Fragment>\n    ))}\n  </>\n);\n\nVolumesList.propTypes = {\n  volumes: PropTypes.arrayOf(\n    PropTypes.shape(VolumeType).isRequired,\n  ).isRequired,\n  selectedVolume: PropTypes.number.isRequired,\n  setSelectedVolume: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const FormButtons = ({ count, setCount }) => (\n  <div className=\"good__buttons-container\">\n    <div className=\"good__counter\">\n      <button\n        className=\"good__count-button\"\n        type=\"button\"\n        onClick={() => setCount(current => (\n          (current <= 1)\n            ? 1\n            : current - 1\n        ))}\n      >\n        -\n      </button>\n      <p className=\"good__count\">\n        {(count > 1)\n          ? count\n          : 1\n        }\n      </p>\n      <button\n        className=\"good__count-button\"\n        type=\"button\"\n        onClick={() => setCount(current => current + 1)}\n      >\n        +\n      </button>\n    </div>\n    <button\n      className=\"good__buy-button\"\n      type=\"submit\"\n    >\n      купить\n    </button>\n  </div>\n);\n\nFormButtons.propTypes = {\n  count: PropTypes.number.isRequired,\n  setCount: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ColorSelect } from '../ColorSelect';\nimport { VolumesList } from '../VolumesList';\nimport { FormButtons } from '../FormButtons';\nimport { GoodType } from '../Types/Types';\n\nexport const GoodForm = ({ good }) => {\n  const [isColorsOpen, setIsColorsOpen] = useState(false);\n  const [selectedVolume, setSelectedVolume] = useState(100);\n  const [selectedColor, setSelectedColor] = useState('');\n  const [count, setCount] = useState(1);\n  const { colors, volumes } = good;\n\n  return (\n    <form\n      className=\"good__form\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        setSelectedColor('');\n        setSelectedVolume(100);\n        setCount(1);\n      }}\n    >\n      <div className=\"good__wrapper\">\n        <ColorSelect\n          colors={colors}\n          isColorsOpen={isColorsOpen}\n          setIsColorsOpen={setIsColorsOpen}\n          selectedColor={selectedColor}\n          setSelectedColor={setSelectedColor}\n        />\n        <p className=\"good__price\">\n          {`${(100 + selectedVolume) * count} грн`}\n        </p>\n      </div>\n      {isColorsOpen\n        ? ''\n        : (\n          <VolumesList\n            volumes={volumes}\n            selectedVolume={selectedVolume}\n            setSelectedVolume={setSelectedVolume}\n          />\n        )\n      }\n      <FormButtons\n        count={count}\n        setCount={setCount}\n      />\n    </form>\n  );\n};\n\nGoodForm.propTypes = {\n  good: PropTypes.shape(GoodType).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { GoodType } from '../Types/Types';\nimport { GoodForm } from '../GoodForm';\n\nexport const Good = ({ good }) => {\n  const [isGoodChoosen, setIsGoodChoosen] = useState(false);\n  const [selectedImg, setSelectedImg] = useState(good.imageUrl);\n\n  return (\n    <>\n      <div key={good.id} className=\"goods-list__good good\">\n        <div className=\"good__new\">new</div>\n\n        <div\n          className=\"good__image-wrapper\"\n        >\n          <img\n            src={selectedImg}\n            alt=\"shampoo\"\n            className=\"good__image\"\n            onMouseEnter={() => setSelectedImg(good.imageHoverUrl)}\n            onMouseLeave={() => setSelectedImg(good.imageUrl)}\n          />\n        </div>\n\n        <div\n          className=\"good__bag\"\n          role=\"button\"\n          tabIndex={0}\n          onKeyPress={() => {\n            setIsGoodChoosen(current => !current);\n          }}\n          onClick={() => {\n            setIsGoodChoosen(current => !current);\n          }}\n        >\n          {isGoodChoosen\n            ? <img src={good.buttonUrl} alt=\"Vector\" />\n            : <img src={good.buttonUrl2} alt=\"Vector_1\" />\n          }\n        </div>\n\n        <h1 className=\"good__title\">{good.title}</h1>\n\n        <p className=\"good__info\">{good.description}</p>\n\n        <GoodForm\n          good={good}\n        />\n      </div>\n    </>\n  );\n};\n\nGood.propTypes = {\n  good: PropTypes.shape(GoodType).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport goodsFromServer from './api/goods.json';\nimport { Good } from './components/Good';\n\nexport const App = () => {\n  const [goods, setGoods] = useState(goodsFromServer);\n\n  return (\n    <div className=\"page-content\">\n      <div className=\"goods-list\">\n        {goods.map(good => (\n          <Good\n            key={good.id}\n            setGoods={setGoods}\n            good={good}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}